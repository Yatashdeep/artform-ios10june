var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name BranchIo
 * @description
 * Branch.io is an attribution service for deeplinking and invitation links
 *
 * @usage
 * ```
 * import { BranchIo } from '@ionic-native/branch-io';
 *
 *
 * constructor(private branch: BranchIo) { }
 *
 * ```
 *
 * @interfaces
 * BranchIoPromise
 * BranchIoAnalytics
 * BranchIoProperties
 * BranchUniversalObject
 *
 */
var BranchIo = (function (_super) {
    __extends(BranchIo, _super);
    function BranchIo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * for development and debugging only
     * @param {boolean} enable Enable debug
     * @return {Promise<any>}
     */
    /**
       * for development and debugging only
       * @param {boolean} enable Enable debug
       * @return {Promise<any>}
       */
    BranchIo.prototype.setDebug = /**
       * for development and debugging only
       * @param {boolean} enable Enable debug
       * @return {Promise<any>}
       */
    function (enable) {
        return;
    };
    /**
     * Disable tracking
     * @param {boolean} disable disable tracking
     * @return {Promise<any>}
     */
    /**
       * Disable tracking
       * @param {boolean} disable disable tracking
       * @return {Promise<any>}
       */
    BranchIo.prototype.disableTracking = /**
       * Disable tracking
       * @param {boolean} disable disable tracking
       * @return {Promise<any>}
       */
    function (disable) {
        return;
    };
    /**
     * Initializes Branch
     * @return {Promise<any>}
     */
    /**
       * Initializes Branch
       * @return {Promise<any>}
       */
    BranchIo.prototype.initSession = /**
       * Initializes Branch
       * @return {Promise<any>}
       */
    function () {
        return;
    };
    /**
     * Set Request Metadata
     * @return {Promise<any>}
     */
    /**
       * Set Request Metadata
       * @return {Promise<any>}
       */
    BranchIo.prototype.setRequestMetadata = /**
       * Set Request Metadata
       * @return {Promise<any>}
       */
    function () {
        return;
    };
    /**
     * for better Android matching
     * @param {string} linkDomain LinkDomain at branch
     * @return {Promise<any>}
     */
    /**
       * for better Android matching
       * @param {string} linkDomain LinkDomain at branch
       * @return {Promise<any>}
       */
    BranchIo.prototype.setCookieBasedMatching = /**
       * for better Android matching
       * @param {string} linkDomain LinkDomain at branch
       * @return {Promise<any>}
       */
    function (linkDomain) {
        return;
    };
    /**
     * First data
     * @return {Promise<any>}
     */
    /**
       * First data
       * @return {Promise<any>}
       */
    BranchIo.prototype.getFirstReferringParams = /**
       * First data
       * @return {Promise<any>}
       */
    function () {
        return;
    };
    /**
     * Latest data
     * @return {Promise<any>}
     */
    /**
       * Latest data
       * @return {Promise<any>}
       */
    BranchIo.prototype.getLatestReferringParams = /**
       * Latest data
       * @return {Promise<any>}
       */
    function () {
        return;
    };
    /**
     * Set identy of user
     * @param {string} userId
     * @return {Promise<any>}
     */
    /**
       * Set identy of user
       * @param {string} userId
       * @return {Promise<any>}
       */
    BranchIo.prototype.setIdentity = /**
       * Set identy of user
       * @param {string} userId
       * @return {Promise<any>}
       */
    function (userId) {
        return;
    };
    /**
     * Logout user
     * @return {Promise<any>}
     */
    /**
       * Logout user
       * @return {Promise<any>}
       */
    BranchIo.prototype.logout = /**
       * Logout user
       * @return {Promise<any>}
       */
    function () {
        return;
    };
    /**
     * Registers a custom event
     * @param {string} eventName
     * @param {any} metaData
     * @return {Promise<any>}
     */
    /**
       * Registers a custom event
       * @param {string} eventName
       * @param {any} metaData
       * @return {Promise<any>}
       */
    BranchIo.prototype.userCompletedAction = /**
       * Registers a custom event
       * @param {string} eventName
       * @param {any} metaData
       * @return {Promise<any>}
       */
    function (eventName, metaData) {
        return;
    };
    /**
     * Send Commerce Event
     * @param {string} event
     * @param {any} metaData
     * @return {Promise<any>}
     */
    /**
       * Send Commerce Event
       * @param {string} event
       * @param {any} metaData
       * @return {Promise<any>}
       */
    BranchIo.prototype.sendCommerceEvent = /**
       * Send Commerce Event
       * @param {string} event
       * @param {any} metaData
       * @return {Promise<any>}
       */
    function (event, metaData) {
        return;
    };
    /**
     * create a branchUniversalObj variable to reference with other Branch methods
     * @param {BranchIoProperties} properties
     * @return {Promise<BranchUniversalObject>}
     */
    /**
       * create a branchUniversalObj variable to reference with other Branch methods
       * @param {BranchIoProperties} properties
       * @return {Promise<BranchUniversalObject>}
       */
    BranchIo.prototype.createBranchUniversalObject = /**
       * create a branchUniversalObj variable to reference with other Branch methods
       * @param {BranchIoProperties} properties
       * @return {Promise<BranchUniversalObject>}
       */
    function (properties) {
        return;
    };
    /**
     * Load credits
     * @param {any} bucket
     * @return {Promise<any>}
     */
    /**
       * Load credits
       * @param {any} bucket
       * @return {Promise<any>}
       */
    BranchIo.prototype.loadRewards = /**
       * Load credits
       * @param {any} bucket
       * @return {Promise<any>}
       */
    function (bucket) {
        return;
    };
    /**
     * Redeem Rewards
     * @param {string} value
     * @param {any} bucket
     * @return {Promise<any>}
     */
    /**
       * Redeem Rewards
       * @param {string} value
       * @param {any} bucket
       * @return {Promise<any>}
       */
    BranchIo.prototype.redeemRewards = /**
       * Redeem Rewards
       * @param {string} value
       * @param {any} bucket
       * @return {Promise<any>}
       */
    function (value, bucket) {
        return;
    };
    /**
     * Show credit history
     * @return {Promise<any>}
     */
    /**
       * Show credit history
       * @return {Promise<any>}
       */
    BranchIo.prototype.creditHistory = /**
       * Show credit history
       * @return {Promise<any>}
       */
    function () {
        return;
    };
    BranchIo.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "setDebug", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "disableTracking", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "initSession", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "setRequestMetadata", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "setCookieBasedMatching", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "getFirstReferringParams", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "getLatestReferringParams", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "setIdentity", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "logout", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "userCompletedAction", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "sendCommerceEvent", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "createBranchUniversalObject", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "loadRewards", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "redeemRewards", null);
    __decorate([
        Cordova({ otherPromise: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BranchIo.prototype, "creditHistory", null);
    /**
     * @name BranchIo
     * @description
     * Branch.io is an attribution service for deeplinking and invitation links
     *
     * @usage
     * ```
     * import { BranchIo } from '@ionic-native/branch-io';
     *
     *
     * constructor(private branch: BranchIo) { }
     *
     * ```
     *
     * @interfaces
     * BranchIoPromise
     * BranchIoAnalytics
     * BranchIoProperties
     * BranchUniversalObject
     *
     */
    BranchIo = __decorate([
        Plugin({
            pluginName: 'BranchIo',
            plugin: 'branch-cordova-sdk',
            pluginRef: 'Branch',
            repo: 'https://github.com/BranchMetrics/cordova-ionic-phonegap-branch-deep-linking',
            platforms: ['iOS', 'Android']
        })
    ], BranchIo);
    return BranchIo;
}(IonicNativePlugin));
export { BranchIo };
//# sourceMappingURL=index.js.map